;Программа градусник на DS1821 at89c2051 
;кварц 11.059 Мгц
;выводи температуру на сегменты 3 сегметна с общим анодом

;вывод на сегменты
data595 equ p3.2
clk595 equ p3.3
lch595 equ p3.4
clr595 equ p3.5

wire1	equ p3.7
x8 equ 50h


seg1 equ 51h
seg2 equ 52h
seg3 equ 53h
a1 equ 54h
a2 equ 55h
a3 equ 56h

org 0h
ljmp start

start:
		lcall init595
		clr 20h.1
;--------------------------------------------------------
;=======================================================
_stop1:
;---------------------------------------------
		lcall Init_1821
		mov a,#0eeh
		lcall ds1821_tx

mov r3,#4d
l000:
mov r1,#100d
l1_0:
mov r2,#250d
l2_0: djnz r2,l2_0
djnz r1,l1_0
djnz r3,l000


		lcall Init_1821
		mov a,#22h
		lcall ds1821_tx
;--------------------------------------------------
		lcall Init_1821
		mov a,#0aah
		lcall ds1821_tx
		lcall ds1821_rx
;-----------------------------------------------------------------------		
;		mov a,#0e7h;текущая температура
		push acc
		anl a,#10000000b		;определяем знак тампературы
		jnz korect_minus                ;переход на выделение модуля 
		clr 20h.1			;бит минусовая температура положительная температура
		pop acc
ok_bcd:		lcall bcd                       ;перевод из нех в десятичн формат

_out:
;кодировка для сегментов

		mov a,a1		;незажигать стврший сегмент если там 0
		jz _pogas		
		lcall code_byte
		cpl a
		mov seg1,a
       		ajmp segment_sled
_pogas:
		mov c,20h.1             ;определение знака температуры
		jnc _gasim_vse          ;положительная гасим все
		mov seg1,#10111111b     ;высвечиваем знак минус
		ajmp segment_sled
_gasim_vse: 	mov seg1,#0ffh		;погасить сегмент

segment_sled:
		mov a,a2
		lcall code_byte
		cpl a
		mov seg2,a

		mov a,a3
		lcall code_byte
		cpl a
		mov seg3,a

;вывод на сегменты
		mov a,seg1
		lcall segment_out
		mov a,seg2
		lcall segment_out
		mov a,seg3
		lcall out_595
_stop:
		ajmp _stop1

korect_minus:
		pop acc
		cpl a   		;получение модуля числа
		add a,#1
		setb 20h.1		;бит минусовая температура
             ljmp ok_bcd
;============================================================================
;перевод из hex в dec A - вход
;============================================================================
bcd:
		mov a1,#0
		mov a2,#0
		mov a3,#0
		clr c
_dec100:	subb a,#100d
		jc ok_10
		inc a1
		ajmp _dec100
ok_10:		add a,#100d
		clr c
dec10:		subb a,#10d
		jc ok_1		
		inc a2
		ajmp dec10
ok_1:		add a,#10d
		clr c
dec1:		subb a,#1
		jc ok_exit
		inc a3
		ajmp dec1
ok_exit:
		ret
;============================================================================
;INIT ds1821
;============================================================================
Init_1821:	setb wire1		;на всякий случай в 1
		clr wire1		;переводим в 0 инициализация

mov r2,#250d
l2: djnz r2,l2				;задержка 500 мкс


		setb wire1		;перевод в 1 для проверки присутвия
mov r2,#20d				;задержка 20 мкс для последующего опроса присутсвия
l20: djnz r2,l20
		mov c,wire1		;опрос на присутствие
		jnc _init_ok
		mov a,#10111111b	;вывести на все сегметны минусы признак отсутствия датчика
		lcall segment_out
		mov a,#10111111b
		lcall segment_out
		mov a,#10111111b
		lcall out_595
		ljmp  start

_init_ok:				;ок датчик присутвует с системе
mov r2,#255d
l223: djnz r2,l223


        	mov c,wire1             ;подождать пока лин перейдет в 1 на всякий случай
		jnc _init_ok

_ok_ok:
		ret
;============================================================================
;передача в ds1821 байта из А
;============================================================================
ds1821_tx:	setb wire1		;на всякий случай в 1
		clr c        		;обнуляем так как будем использовать для выхода
		mov x8,#08h		;для цикла предачи 8 бит

ds1821_txtx:
		clr wire1		;линия в 0
		rrc a			;младщий в перед
		jnc ds1821_tx1          ;переход на передачй 0
		setb wire1              ;передача 1
ds1821_tx1:
mov r2,#15d                    		;пауза 30 мкс
l210: djnz r2,l210
        	setb wire1              ;линию в 1
mov r2,#30d                             ;пауза 60 мкс
l2100: djnz r2,l2100

                djnz x8,ds1821_txtx     ;цикл по 8 битам
		 ret

;-----------------------
;============================================================================
;Прием байта из ds1821 в рег А
;============================================================================
ds1821_rx:
		mov a,#0h		;здесь будет принятое значение
		clr c                   ;обнуляем т.к. через него
		mov x8,#08h             ;цикл по 8 битам
		
ds1821_l:
		clr wire1               ;линия в 0 обозначаем для отсчета ведомому
		nop
		setb wire1		;в 1 отпускаем чтоб посмотреть зедерку установления
ds1821_rxrx:    

mov r2,#5d				;задержка 10 мкс
l23210r: djnz r2,l23210r
		mov c,wire1             ;чтения принятого бита
		rrc a                   ;сдвиг в А

mov r2,#30d                             ;задерка 60 мкс
lqwe: djnz r2,lqwe

		djnz x8,ds1821_l        ;цикл приема следующего бита

ds1821_rx_exit:   setb wire1
		  ret
;=======================================================================
;вывод значений из пямяти на регистр595
;=======================================================================	
out_595:
		lcall segment_out
out_595_11:
		setb lch595
		nop
		clr lch595
		ret
;=======================================================================
;кодирывания байта мл тетрады А-вход А-выход
;=======================================================================	
code_byte:	anl a,#00001111b
		mov dptr,#code_tab
		movc a,@a+dptr
		ret
code_tab:	db 3fh,06h,5bh,4fh,66h,6dh,7dh,07h,7fh,6fh
;==============================================================================
;вывод на сдвиговые регистр из R0
;==============================================================================
init595:
		clr lch595
		clr data595
		clr clk595

		clr clr595
		nop
		setb clr595
		ret
;==============================================================================
;вывод на сдвиговые регистр из A
;==============================================================================
segment_out:
		clr c
;		mov a,r0
		mov r1,#08h
loc_1_595:		
		rrc a
		mov data595,c		;вывод даные 1 бит в порт
		
		setb clk595		;1 импульс часов, загрузка 1 бита
		nop
		nop
		nop
		clr clk595
		clr c
		djnz r1,loc_1_595
		
		ret
;==========================================================
;
;==========================================================
del1ms:
mov r1,#30d
lrex: mov r2,#22d
lrin: djnz r2,lrin
djnz r1,lrex
ret
del20ms:
lcall del4ms
lcall del4ms
lcall del4ms
lcall del4ms
lcall del4ms
ret
del4ms:
lcall del1ms
lcall del1ms
lcall del1ms
lcall del1ms
ret
end
